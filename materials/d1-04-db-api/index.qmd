---
title: "Databases & APIs"
subtitle: "rstudio::conf(2022) <br> Building Production-Quality Shiny Applications"
author: "Eric Nantz"
footer: "[shinyprod.com](https://shinyprod.com)"
from: markdown+emoji
format: 
  revealjs:
    theme: [default, ../slides.scss] # moon= teal bg  |  dark
    scrollable: true
    incremental: true
    slide-number: c/t # c/t | c | h/v | h.v
    slide-tone: false #true
    code-line-numbers: true
    chalkboard: true
    history: false
    #title-slide-attributes:
      #data-background-image: assets/img/bg/vincentiu-solomon-ln5drpv_ImI-unsplash.jpg
    
---

```{r}
#| label: add-object
#| echo: false
sample_data <- readRDS("../db/sample_data.rds")
```

## The R Process in Shiny {background-image="assets/img/samus_managing.png" background-size="70%"}

## Powerup with Delegation {background-image="assets/img/samus_powerup.jpg" background-size="70%"}

::: {.fragment}

![](assets/img/memory.jpg){.absolute top=250 left=100 width="30%"}

:::

::: {.fragment}

![](assets/img/cpu.jpg){.absolute top=250 left=650 width="30%"}

:::

# Databases and Shiny

---

:::: {.columns}

### SQL Jedi

::: {.column width="50%"}

![](assets/img/c3po.png){width="45%"}

:::

::: {.column width="50%}

### `{dplyr}` Jedi 

![](assets/img/r2-d2.png){width="70%"}

:::

::::

## Interface to Databases: `{DBI}`

Unified set of methods & classes bridging interfacing R to database management systems (DBMS)

* Connect and disconnect from DB
* Execute queries
* Extract results
* Obtain metadata when available
* Each DBMS supported by a dedicated package

## All About Connections

You have used connections in R (and may not realize it)

```r
read.csv("path/to/file.csv", stringsAsFactors = FALSE)

readr::read_csv("path/to/file.csv")

openxlsx::write.xlsx(df, file = "/path/to/file.xlsx")
```

. . .

<br>

> Behind the scenes: connections are dynamically created (and terminated) during file input/output.

## Database Options

::: {.nonincremental}
* Relational databases come in many flavors
:::

:::: {.columns}

::: {.column}

### [SQLite](https://www.sqlite.org/index.html)

<br>

`r fontawesome::fa("file")` Written to file

`r fontawesome::fa("door-open")` Open access

`r fontawesome::fa("r-project")` [`{RSQLite}`](https://rsqlite.r-dbi.org/)

Ideal for prototyping DB solutions

:::

::: {.column}

### [PostGreSQL](https://www.postgresql.org/)

<br>

`r fontawesome::fa("database")` Hosted on server

`r fontawesome::fa("lock")` Access via authentication

`r fontawesome::fa("r-project")` [`{RPostgres}`](https://rpostgres.r-dbi.org/)

Ideal for production-grade DB workflows

:::

::::


## Defining Connection

```{r}
#| label: connection-example
#| echo: true
library(DBI)
library(RSQLite)

# initialize connection object
con <- dbConnect(
  drv = RSQLite::SQLite(),
  dbname = ":memory:"
)

# send data frame to a table
dbWriteTable(con, "sample_data", as.data.frame(sample_data))

# disconnect when done
#dbDisconnect(con)
```

## Applying your `{dplyr}` Skillz

`{dbplyr}` provides automatic translation from dplyr syntax to SQL statements

* Integrates with connection objects created by `{DBI}`
* Calls are evaluated **lazily**: Only when you request results
* Common dplyr verbs supported out of the box

## Applying your `{dplyr}` Skillz

```{r}
#| label: dbplyr-demo
#| echo: true
library(dplyr)

sample_db <- tbl(con, "sample_data")

sample_db %>%
  group_by(department) %>%
  summarize(total_objects = sum(n_objects, na.rm = TRUE))
```

## Your Turn: [Exercise 1](ex-1.html){target="_blank"}

In the application `ex-1/app.R`, pivot the backend to leverage a SQLite database. See the [Exercise 1](ex-1.html){target="_blank"} page for additional details.

```{r}
#| label: ex-1-timer
library(countdown)
countdown(minutes = 10, seconds = 0)
```

## Connections in Shiny

:::: {.columns}

::: {.column width="40%"}

![](assets/img/one_user.png)
:::

::: {.column width="60%"}

Logical ways to manage connections when developing solo

:::

::::

## Connections in Shiny

:::: {.columns}

::: {.column width="70%"}

![](assets/img/computer_party.jpg)
:::

::: {.column width="30%"}

::: {.nonincremental}
* Many users creating connections
* Potential for degraded performance in your app
:::
:::

::::

## Enter the [`{pool}`](https://github.com/rstudio/pool)!

> Abstraction layer on top of database connection objects

* Holds a group of connections to database 
* Knows to expand or reduce connections as needed

## Let's Dive In

:::: {.columns}

::: {.column width="50%"}

```r
con <- dbConnect(
  drv = RSQLite::SQLite(),
  dbname = ":memory:"
)
```

:::

::: {.column width="50%"}

```r
pool <- dbPool(
  drv = RSQLite::SQLite(),
  dbname = ":memory:"
)
```
:::

::::

::: {.nonincremental}
* **pool** object a drop-in replacement for **con**
* Each query goes to the pool first, then fetches or initializes a connection
* Not necessary to create connections yourself 
:::

# Executing APIs from Shiny

## AP - What?

> Application Programming Interface: Method of communicating between different **software services**

. . .

![](assets/img/flynn_computer.png){.absolute top=250 left=70 width="30%"}

. . .

![](assets/img/red_x.png){.absolute top=250 left=70 width="30%"}

. . .

![](assets/img/tron-lightcycles.jpg){.absolute top=300 left=450 width="50%"}

## Benefits of APIs

* Communication using a **standard set** of web request protocols
* **Agnostic** to the software or language performing the request
* Capable of producing many types of output

. . .

### How can we communicate (and create) APIs in R?

## [`{httr2}`](https://httr2.r-lib.org)

> A ground-up rewrite of `{httr}` providing a pipeable API

* Build a *request* object to facilitate different pieces of a request workflow
* Ability to perform dry-runs **before** actually sending the request
* Automatic conversion of HTTP errors to native R errors

# `r fontawesome::fa("people-carry", "white")` Code-Along {background-color="#17395c"}

[Code-Along 1](codealong-1.html){target="_blank"}: Calling the MET Museum API using `{httr2}`

## Your Turn: [Exercise 3](ex-3.html){target="_blank"}

Call the MET Museum API and a custom image overlay API within the Shiny app. See the [Exercise 3](ex-3.html){target="_blank"} page for additional details.

```{r}
#| label: ex-3-timer
library(countdown)
countdown(minutes = 10, seconds = 0)
```


## Database Resources

::: {.nonincremental}
* [Using databases with Shiny](https://emilyriederer.netlify.app/post/shiny-db/) blog post by Emily Riederer
* [Databases using R](https://db.rstudio.com/)
* [`{DBI}`](https://dbi.r-dbi.org/): R Database Interface 
* [`{dbplyr}`](https://dbplyr.tidyverse.org/): A `{dplyr}` backend for databases
* [TidyX]() episodes 
* [`{dm}`](https://cynkra.github.io/dm/): Relational data models
* [Shiny and Arrow](https://www.rstudio.com/blog/shiny-and-arrow/) blog post by Michael Thomas
:::

## API Resources

::: {.nonincremental}
* [`{plumber}`](https://www.rplumber.io/): An API generator for R
:::

## Cleaning Up

```{r}
#| label: clean_connection
#| echo: false

DBI::dbDisconnect(con)
```

