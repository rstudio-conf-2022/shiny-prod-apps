---
title: "Windows of Reactivity"
subtitle: "rstudio::conf(2022) <br> Building Production-Quality Shiny Applications"
author: "Eric Nantz"
footer: "[shinyprod.com](https://shinyprod.com)"
format: 
  revealjs:
    theme: [default, ../slides.scss] # moon= teal bg  |  dark
    scrollable: true
    incremental: true
    slide-number: c/t # c/t | c | h/v | h.v
    slide-tone: false #true
    code-line-numbers: false
    history: false
    #title-slide-attributes:
      #data-background-image: assets/img/bg/vincentiu-solomon-ln5drpv_ImI-unsplash.jpg
    
---

## Default Perspective

:::: {.columns}

::: {.column width="50%"}

![](assets/img/reactlog/select_input_big.png)

:::

::: {.column width="50%"}

![](assets/img/reactlog/plot_output.png)

:::

::::

## Default Perspective

:::: {.columns}

::: {.column width="45%"}

```{r}
#| label: input-code
#| echo: true
#| eval: false
selectInput(
  "dept",
  "Select Department",
  choices = dept_choices,
  selected = dept_choices[1],
  multiple = FALSE
)
```

:::

::: {.column width="55%"}

```{r}
#| label: plot-code
#| echo: true
#| eval: false
output$top_objects <- renderPlot({
  df <- art_data |>
    filter(department == input$dept)
  
  # more data processing ....
  
  ggplot(df, aes(x = name, y = n)) +
    geom_col() +
    xlab(NULL) +
    ylab("Frequency of Annotation") +
    ggtitle("Top 5 Objects Annotated")
})
```

:::

::::

## Default Perspecive

:::: {.columns}

::: {.column width="50%"}

![reactive input: input$dept](assets/img/reactlog/input-value_ready.svg)
:::

::: {.column width="50%"}

![output: output$top_objects](assets/img/reactlog/output_ready.svg)

:::

::::

The beginning (and end) of a typical Shiny interaction

* Can this approach scale to multiple inputs?

## Default Perspective

:::: {.columns}

::: {.column width="50%"}

![](assets/img/reactlog/select_input_big.png)

![](assets/img/reactlog/slider_input_big.png)

:::

::: {.column width="50%"}

![](assets/img/reactlog/plot_output.png)

:::

::::

## Default Perspective

:::: {.columns}

::: {.column width="45%"}

```{r}
#| label: input-code2
#| echo: true
#| eval: false
selectInput(
  "dept",
  "Select Department",
  choices = dept_choices,
  selected = dept_choices[1],
  multiple = FALSE
)

sliderInput(
  "n_top",
  "Top Annotations",
  min = 1,
  max = 10,
  value = 5,
  step = 1
)
```

:::

::: {.column width="55%"}

```{r}
#| label: plot-code2
#| echo: true
#| eval: false
output$top_objects <- renderPlot({
  df <- art_data |>
    filter(department == input$dept)
  
  df2 <- df |>
    # more data processing 
    # using input$n_top
  
  ggplot(df2, aes(x = name, y = n)) +
    geom_col() +
    xlab(NULL) +
    ylab("Frequency of Annotation")
})
```

:::

::::

## Your Turn: [Exercise 1](ex-1.html){target="_blank"}

Open the application in `ex-1/app.R` and see if you can improve the reactivity flow in the next 5 minutes. View more details at the [Exercise 1](https://shinydevseries.com){target="_blank"} page.

```{r}
#| label: ex-1-timer
library(countdown)
countdown(minutes = 5, seconds =0)
```

## The Middle

:::: {.columns}

::: {.column width="33%"}

![](assets/img/reactlog/input-value_ready.svg)
:::

::: {.column width="33%"}

![](assets/img/reactlog/reactive_ready.svg)

![reactive expressions](assets/img/reactlog/reactive_ready.svg)

:::

::: {.column width="33%"}

![](assets/img/reactlog/output_ready.svg)

:::

::::

## The Building Blocks of Reactivity {.smaller}

::: {.panel-tabset}

### Inputs & Reactive Values

The **sources** used in downstream endpoints

::: {.nonincremental}
* Not only the classic input widgets within your UI
:::

### Reactive Expressions

Intermediate bridges between sources and endpoints. 

::: {.nonincremental}
* Both **consume** and **produce**
:::

### Outputs & Observers

Consumers of one or more sources. 

::: {.nonincremental}
* Goal is to produce a side-effect
:::

:::

## Your Turn: [Exercise 2](ex-2.html){target="_blank"}

Open the application in `ex-2/app.R` which has 2 inputs that drive the visualization. See if you can optimize the reactive calculations in the next 5 minutes. 

```{r}
#| label: ex-2-timer
library(countdown)
countdown(minutes = 5, seconds =0)
```

## Navigating Reactivity: `{reactlog}`

:::: {.columns}

::: {.column width="40%"}

```r
library(shiny)
library(reactlog)

reactlog_enable()

# remaining app logic
```

:::

::: {.column width="60%"}

::: {.nonincremental}

* Complete overhaul of Shiny's interactive reactive flow visualization
* Powered by the [`{reactlog}`](https://rstudio.github.io/reactlog/index.html) package
* Essential for answering **what** (and potentially **why**) your app behaves a certain way

:::

:::

::::

# Demo Time!

## {background-image="https://media.giphy.com/media/l41YBHH1A6OPQ5iXS/giphy.gif"}

---

. . .

![](https://i.redd.it/ld6eza8y2o591.jpg){.absolute top=100 left=0 width="400" height="500"}

. . . 

![](https://media.giphy.com/media/Q60iJpkD9URe2DpQgd/giphy.gif){.absolute top=100 left=550 width="450" height="500"}

. . . 

:::: {.columns}

::: {.column width="50%"}

### Reactive

:::

::: {.column width="50%"}

### Observer

:::

::::

## {auto-animate=false}

:::: {.columns}

::: {.column width="50%"}

### Reactive

* Use for **calculations**
* Lazy 
* Cached
* Returns a value
* Absolutely no side effects

:::

::: {.column width="50%"}

### Observer

* Use for **side effects**
* __Very__ eager
* Forgetful (no caching)
* No return value
* __Only__ for side effects

:::

::::

## Isn't Lazy a ....

When constructing a Shiny app, lazy is not a bad thing for reactives!

* Only preform calculations when absolutely necessary
* Intentional design will reward you with efficient performance

## Those Troublesome Observers

:::: {.columns}

::: {.column width="50%"}

::: {.nonincremental}

* Observers may cause reactive chaos in your app
* But with a little control, they can be just as valuable

:::

:::

::: {.column width="50%"}

![Joe Cheng at Shiny Dev Con 2016](assets/img/joe_shinydevcon.png)

:::

::::

## Event-driven Processing

`observeEvent` ensures processing only happens based on a **single** trigger

* Button click
* Updated reactive expression
* Updated `reactiveValues` or `reactiveVal`

## Inputs from the Server

* Users typically drive processing through the Shiny UI
* Sometimes you need to create a dynamic version that can be updated within the server-side logic
* The MVPs: `reactiveValues` and `reactiveVal`

## Inputs from the Server

```r
server <- function(input, output, session) {
  rv <- reactiveValues(x = 0)
  rv2 <- reactiveVal(0)
  
  observeEvent(input$btn, {
    rv$x <- rv$x + 1
    rv2(rv2() + 1)
  })
}
```

# `r fontawesome::fa("people-carry", "white")` Code-Along {background-color="#17395c"}

[Code-Along 1](codealong-1.html){target="_blank"}: Building the MET image viewer foundation

## More from the Reactivity Bank

* [`bindEvent`](https://shiny.rstudio.com/reference/shiny/1.6.0/bindEvent.html): Modify an object to support triggers
* [`invalidateLater`](https://shiny.rstudio.com/reference/shiny/1.6.0/invalidateLater.html): Use running time as a source to reactivity
* [`reactivePoll`](https://shiny.rstudio.com/reference/shiny/latest/reactivePoll.html): Create a reactive data source invalidated by a check function
* [`isolate`](https://shiny.rstudio.com/reference/shiny/1.6.0/isolate.html): Prevent reactivity
* [`req`](https://shiny.rstudio.com/reference/shiny/1.6.0/req.html): Ensure pre-conditions are met before proceeding
* [`debounce/throttle`](https://shiny.rstudio.com/reference/shiny/1.6.0/debounce.html): Slow the reactive-roll down

## Additional Resources

::: {.nonincremental}
* [Mastering Reactivity](https://mastering-shiny.org/reactivity-intro.html) chapters from Hadley Wickham's [Mastering Shiny](https://mastering-shiny.org/index.html)
* Joe Cheng's Effective Reactive Programming: [Part 1](https://rstudio.com/resources/shiny-dev-con/reactivity-pt-1-joe-cheng/) and [Part 2](https://rstudio.com/resources/shiny-dev-con/reactivity-pt-2/)
* Shiny Developer Series [Episode 12](https://shinydevseries.com/interview/ep012/) with Barret Schloerke
:::