---
title: "Development Best Practices"
subtitle: "rstudio::conf(2022) <br> Building Production-Quality Shiny Applications"
author: "Eric Nantz"
footer: "[shinyprod.com](https://shinyprod.com)"
from: markdown+emoji
format: 
  revealjs:
    theme: [default, ../slides.scss] # moon= teal bg  |  dark
    scrollable: true
    incremental: true
    slide-number: c/t # c/t | c | h/v | h.v
    slide-tone: false #true
    code-line-numbers: true
    chalkboard: true
    history: false
    #title-slide-attributes:
      #data-background-image: assets/img/bg/vincentiu-solomon-ln5drpv_ImI-unsplash.jpg
    
---

## More to come

::: callout-warning
These slides are under construction and will be updated continuously until the workshop date.
:::

## All About Perspective

![](https://d33wubrfki0l68.cloudfront.net/571b056757d68e6df81a3e3853f54d3c76ad6efc/32d37/diagrams/data-science.png)

R is the standard-bearer for data analysis tooling

## Shiny App Development

Not just providing another interface for data analysis

. . .

You are engineering an **entire workflow**

## This Could Happen to You

::: {.r-stack}
![](assets/img/messydesk.svg){.fragment width="550" height="400}

![](assets/img/works_my_machine.jpg){.fragment width="500" height="570"}

![](assets/img/conflicts.jpg){.fragment width="600" height="400"}
:::

## Thinking of You

These principles can guide (future) you on the right path:

* Rapid prototyping in design process
* Deliberate control of app dependencies
* Managing code complexity with native R frameworks
* Defending against regressions with testing
* Version control for collaboration and peace of mind

# Rapid Prototyping {background-image="assets/img/rapid_prototyping.jpg" background-size="cover" background-color="black"}

---

![](assets/img/shinycal.png)

::: footer
[rpodcast.shinyapps.io/shinycal](https://rpodcast.shinyapps.io/shinycal)
:::

## {background-video="https://shinydevseries-assets.us-east-1.linodeobjects.com/rpharma_demo_final.mp4" background-video-loop="true" background-size="contain"}


## Blueprint for Rapid Prototyping

* Elicit goals & requirements from customers **early** and **often**
* Resist urge to perfect server-side processing right away
* Bring a minimum viable product (MVP) to customers for feedback

---

![](assets/img/whiteboard_design.jpg)

# `r fontawesome::fa("people-carry", "white")` Code-Along {background-color="#17395c"}

[Code-Along 1](codealong-1.html){target="_blank"}: Using the `{shinipsum}` package for rapid UI prototyping

## Additional Tools

::: {.nonincremental}
* [moqups.com](https://moqups.com/): Streamlined web app to create wireframes, mockups, diagrams, and more
* [excalidraw.com](https://excalidraw.com/): Collaborative whiteboard tool for sketching diagrams
* Any presentation software (yes, even PowerPoint)
:::

# Application Dependencies

## It's Never Just Shiny

... at least for production-quality apps!

* External data sources
* Connections to other execution backends
* Additional R packages!

## Turned Upside-Down

Imagine your application is working great!

<br>

. . . 

:::: {.columns .v-center-container}

::: {.column width="50%"}

```r
update.packages(ask = FALSE)
remotes::install_github("pkg")
```

:::

::: {.column width="50%}

![](https://rfortherestofus.com/wp-content/uploads/2020/09/update-packages-prompt.png)

:::

::::

## Turned Upside-Down

:::: {.columns .v-center-container}

::: {.column width="50%"}

`ggplot2` version `0.9.3`

![](assets/img/computer_user_happy.png){width="60%"}

:::

::: {.column width="50%"}

`ggplot2` version `1.0.0`

![](http://i.giphy.com/RhEvCHIeZAZ6E.gif)

:::

::::

## Take Control with [`{renv}`](https://rstudio.github.io/renv/)

> Create **r**eproducible **env**ironments for your R projects.

* Next generation of `{packrat}`
* Isolated package library from rest of your system
* Transfer projects to different collaborators / platforms
* **Reproducible** package installation 
* Easily create new projects or convert existing projects with RStudio or built-in functions.

## Under the Hood

Upon initializing a project:

1. Project-level `.Rprofile` to activate custom package library on startup
1. Lockfile `renv.lock` to describe state of project library
1. `renv/library` to hold private project library
1. `renv/activate.R` performs activation

## Develop a Routine

Sticking with `{renv}` will pay off (trust me)

* Fair play to mix packages from CRAN, GitHub, and proprietary sources
* Roll back when a package upgrade doesn't play nicely
* **You** make the call when to update your library!

# Application Structure

## A Single Point: `app.R`

Prototype apps can coast by with a single `app.R`

* More inputs, visualizations, modules, tabs ...
* Eventually the `app.R` almost explodes
* Difficult to collaborate without conflicts

## `R` Directory

* Shiny supports auto-loading scripts in an `R` directory
* Nested directories not supported
* More information on the [App Formats](https://shiny.rstudio.com/articles/app-formats.html ) article

## Enter the [`{golem}`](https://thinkr-open.github.io/golem/)

> Opinionated framework for building production-grade Shiny applications as **R packages**

* Scripts guide you with first steps akin to `{usethis}` & `{devtools}`
* Encourages Shiny best practices (especially **modules**)
* Streamlines deployment on multiple platforms

# `r fontawesome::fa("people-carry", "white")` Code-Along {background-color="#17395c"}

[Code-Along 2](codealong-2.html){target="_blank"}: Create a new Shiny application using the `{golem}` framework

::: footer
[engineering-shiny.org](https://engineering-shiny.org/)

## Enter the [`{rhino}`](https://appsilon.github.io/rhino/)

> Create Shiny apps using software engineering best practices and development tools

* App structure inspired by other web app stacks
* Also encourages Shiny **modules** 
* Pre-configured development tools
* Relies on [`{box}`](https://klmr.me/box/) for importing functions
* Automatic configuration of `{renv}` for package management

# `r fontawesome::fa("people-carry", "white")` Code-Along {background-color="#17395c"}

[Code-Along 3](codealong-3.html){target="_blank"}: Create a new Shiny application using the `{rhino}` framework

# Regression Testing

## A Familiar Strategy

. . .

![](assets/img/hadley-wickham.gif)

. . .

```r
#> Error: Can't access reactive value 'x' outside of reactive consumer
#> ℹ Do you need to wrap inside reactive() or observer()?
```

. . .

```r
#> Error: Unexpected character object for output$greeting
#> ℹ Did you forget to use a render function?
```

## Enter [`{shinytest2}`](https://rstudio.github.io/shinytest2/)

> `{shinytest2}` provides a streamlined toolkit for unit testing Shiny applications

* Next generation of `{shinytest}`
* Tightly coupled with [`{testthat}`](https://testthat.r-lib.org/), used widely in package development
* Powered by [`{chromote}`](https://github.com/rstudio/chromote) to render applications in a headless Chrome browser
