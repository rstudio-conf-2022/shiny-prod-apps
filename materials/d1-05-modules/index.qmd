---
title: "All About Modules"
subtitle: "rstudio::conf(2022) <br> Building Production-Quality Shiny Applications"
author: "Eric Nantz"
footer: "[shinyprod.com](https://shinyprod.com)"
from: markdown+emoji
format: 
  revealjs:
    theme: [default, ../slides.scss] # moon= teal bg  |  dark
    scrollable: true
    incremental: true
    slide-number: c/t # c/t | c | h/v | h.v
    slide-tone: false #true
    code-line-numbers: true
    chalkboard: true
    history: false
    #title-slide-attributes:
      #data-background-image: assets/img/bg/vincentiu-solomon-ln5drpv_ImI-unsplash.jpg
    
---

## What are Modules?

. . .

### Building blocks to compose any Shiny app out of smaller, more understandable pieces

* Avoids namespace collisions when using same widget across different areas of your app
* Allow you to encapsulate distinct app interfaces
* Organize code into logical and easy-to-understand components
* Facilitate collaboration

## Sound familiar?

* R functions also help avoid collisions in variable names with general R code
* Essential for creating non-trivial and extensive workflows

## Anatomy of a Function (UI) {auto-animate=true}

:::: {.columns}

::: {.column width="60%"}
```r
artUI <- function() {
  tagList(
    checkboxInput(
      "input1",
      "Check Here"
    ),
    selectInput(
      "input2",
      "Select Object",
      choices = c("jar", "vase"),
      selected = "jar",
      multiple = FALSE
    ),
    plotOutput("plot1")
  )
}
```
:::

::: {.column width="40%"}

:::

::::

## Anatomy of a Module (UI) {auto-animate=true}

:::: {.columns}

::: {.column width="60%"}

```r
artUI <- function(id) {
  ns <- NS(id)
  tagList(
    checkboxInput(
      ns("input1"),
      "Check Here"
    ),
    selectInput(
      ns("input2"),
      "Select Object",
      choices = c("jar", "vase"),
      selected = "jar",
      multiple = FALSE
    ),
    plotOutput(ns("plot1"))
  )
}
```
:::

::: {.column width="40%"}

:::

::::

## Anatomy of a Module (UI)

:::: {.columns}

::: {.column width="60%"}


```{.r code-line-numbers="1,2,5,9"}
artUI <- function(id) {
  ns <- NS(id)
  tagList(
    checkboxInput(
      ns("input1"),
      "Check Here"
    ),
    selectInput(
      ns("input2"),
      "Select Object",
      choices = c("jar", "vase"),
      selected = "jar",
      multiple = FALSE
    )
  )
}
```

:::

::: {.column width="40%"}

* `id`: String to use for namespace
* `ns <- NS(id)`: Create proper namespace function

:::

::::

## Anatomy of a Module (Server) {auto-animate=true}

:::: {.columns}

::: {.column width="75%"}

```r
artServer <- function(input, output, session) {
  df <- reactive({
    # do something fancy
  })
  
  output$plot1 <- renderPlot({
    ggplot(df(), aes(x = x, y = y)) +
      geom_point()
  })
}
```

:::

::: {.column width="25%"}

Hello

:::

::::

## Anatomy of a Module (Server) {auto-animate=true}

:::: {.columns}

::: {.column width="75%"}

```r
artServer <- function(id) {
  moduleServer(
    id,
    function(input, output, session) {
      df <- reactive({
        # do something fancy
      })
      
      output$plot1 <- renderPlot({
        ggplot(df(), aes(x = x, y = y)) +
          geom_point()
      })
    }
  )
}
```

:::

::: {.column width="25%"}

Minimal changes necessary

:::

::::

## Anatomy of a Module (Server) {auto-animate=true}

:::: {.columns}

::: {.column width="70%"}

```{.r code-line-numbers="1,2"}
artServer <- function(id) {
  moduleServer(id,
    function(input, output, session) {
      df <- reactive({
        # do something fancy
      })
      
      output$plot1 <- renderPlot({
        ggplot(df(), aes(x = x, y = y)) +
          geom_point()
      })
    }
  )
}
```

:::

::: {.column width="30%"}

:thinking: `id`

:::

::::

* ``moduleServer()`: Encapsulate server-side logic with namespace applied.

## Invoking Modules

```{.r}
ui <- fluidPage(
  fluidRow(
    artUI("mod1")
  )
)

server <- function(input, output, session) {
  artServer("mod1")
}

shinyApp(ui, server)
```

## Giving and Receiving 

:::: {.columns}

::: {.column width="60%"}

```r
artUI <- function(id, choices = c("jar", "vase")) {
  ns <- NS(id)
  tagList(
    checkboxInput(
      ns("input1"),
      "Check Here"
    ),
    selectInput(
      ns("input2"),
      "Select Object",
      choices = choices,
      selected = choices[1],
      multiple = FALSE
    ),
    plotOutput(ns("plot1"))
  )
}
```
:::

::: {.column width="40%"}

* Reasonable inputs: static values, vectors, flags
* Avoid **reactive** parameters
* Return value: `tagList()` of inputs, output placeholders, and other UI elements 

:::

::::

## Giving and Receiving 

```{.r}
artServer <- function(id, df, title = "My Plot") {
  moduleServer(id,
    function(input, output, session) {
      user_selections <- reactive({
        list(input1 = input$input1, input2 = input$input2)
      })
      
      output$plot1 <- renderPlot({
        ggplot(df(), aes(x = x, y = y)) +
          geom_point() +
          ggtitle(title)
      })
      
      user_selections
    }
  )
}
```

* Input parameters (and return values) can be a mix of static and **reactive** objects

## To () or not to () {.smaller}

:::: {.columns}

::: {.column width="40%"}

```{.r}
# app server
df <- reactive({
  art_data |>
    filter(dept == input$dept)
})

artServer("mod1", df)
```

:::

::: {.column width="60%"}

```{.r}
artServer <- function(id, df, title = "Amazing") {
  moduleServer(id,
    function(input, output, session) {
      user_selections <- reactive({
        list(input1 = input$input1,
             input2 = input$input2)
      })
      
      output$plot1 <- renderPlot({
        ggplot(df(), aes(x = x, y = y)) +
          geom_point() +
          ggtitle(title)
      })
      
      user_selections
    }
  )
}
```

:::

::::

* Reactive parameters reference by **name**: `df`
* Inside module, **invoke** reactive parameter as you would any other reactive in Shiny: `df()`
* Any reactive(s) returned by module should also be reference by **name**: `user_selections`,  ~~`user_selections()`~~

## Your Turn: [Exercise 1](ex-1.html){target="_blank"}

Create a Shiny module for the core image viewer portion of the application in `ex-1/app.R`

```{r}
#| label: ex-1-timer
library(countdown)
countdown(minutes = 10, seconds = 0)
```

