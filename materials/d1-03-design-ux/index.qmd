---
from: markdown+emoji
format: 
  revealjs:
    theme: [default, ../slides.scss] # moon= teal bg  |  dark
    scrollable: true
    incremental: true
    slide-number: c/t # c/t | c | h/v | h.v
    slide-tone: false #true
    code-line-numbers: true
    chalkboard: true
    history: false
    footer: "[shinyprod.com](https://shinyprod.com)"
    #title-slide-attributes:
      #data-background-image: assets/img/bg/vincentiu-solomon-ln5drpv_ImI-unsplash.jpg
    
---

# Design & User Experience {background-image="assets/img/city.jpg" background-size="cover" background-color="black"}

---

:::: {.columns .v-center-container}

::: {.column width="50%"}

![](assets/img/sink_plugs.jpeg){width="100%"}

:::

::: {.column width="50%"}

![](assets/img/sign-east-east.png){width="90%"}

:::

::::

## But ... I'm not a Web Designer?

::: {.nonincremental}
* Wealth of packages available in the Shiny ecosystem
* Plug-in favorite theme styles
* Ability to go as low-level as desired with CSS and JavaScript
:::

### 💡 It's not all about you! (That's good)

# Language of the Web

---

### Shiny

```r
dept_choices <- c("Ancient Near Easter Art", "American")
selectInput(
  "dept",
  "Select Department",
  choices = dept_choices
)
```

### HTML

```html
<div class="form-group shiny-input-container">
  <label class="control-label" id="dept-label" for="dept">
    Select Department
  </label>
  <div>
    <select id="dept" class="form-control">
      <option value="Ancient Near Easter Art" selected>Ancient Near Easter Art</option>
      <option value="American">American</option>
    </select>
  </div>
</div>

```

## Multiple Levels of Abstraction

<br>

:::: {.columns}

::: {.column width="26%"}

`{shiny}`

````r
fluidRow()
````

:::

::: {.column width="35%"}

`{htmltools}`

```r
div(class="row", ...)
```

:::

::: {.column width="36%"}

Raw HTML

```html
<div class="row">...</div>
```

:::

::::

<br>

Empowers users across spectrum of design experience

## Cascading Style Sheets (CSS)

Set of **rules** that define how HTML content is **presented** in the browser

<br>

```html
selector {
  property1: value;
  property2: value;
}
```

<br>

* **selector** defines which elements on page to apply rule
* **property list** set properties of elements to specific values

## Customizing CSS in Shiny (1)

:::: {.columns}

::: {.column width="55%"}

```r
ui <- fluidPage(
  tags$head(
    tags$style(
      HTML("
      body {
        background-color: blue;
        color: white;
      }")
    )
  ),
  # application UI
  ...
)
```

:::

::: {.column width="45%"}

* `tags` originates from `{htmltools}`, but imported with `{shiny}`

:::

::::

## Customizing CSS in Shiny (2)

:::: {.columns}

::: {.column width="50%"}

```r
# app.R

ui <- fluidPage(
  tags$head(
    tags$link(
      rel = "stylesheet", 
      type = "text/css", 
      href = "custom.css"
    )
  )
)
```

:::

::: {.column width="50%"}

```html
/* www/custom.css */

body {
  background-color: blue;
  color: white;
}
```

:::

::::

## Customizing CSS in Shiny (3)

```r
ui <- fluidPage(
  h2(
  "Art Viewer Application", 
  style = "font-family: monospace;"
  ),
  ...
)
```


## Your Turn: [Exercise 1](ex-1.html){target="_blank"}

In the application `ex-1/app.R`, give the image display a bit of style! Visit the [exercise page](ex-1.html) for more details.

```{r}
#| label: ex-1-timer
library(countdown)
countdown(minutes = 5, seconds = 0)
```

## (Almost) Endless Possibilities

::: {.nonincremental}
* Shiny UI powered by Bootstrap
* Defaults are clean and simple
* Revising the style for every element ...
:::

::: {.r-stack}
![](https://media.giphy.com/media/ebITvSXYKNvRm/giphy.gif){.fragment width="80%"}

:::

## Enter [`{bslib}`](https://rstudio.github.io/bslib/)

> Provides tools for customizing Bootstrap themes directly in R

* Easy to explore theme options **interactively**
* Logical parameters to most common elements for color, font, and more
* Built upon the [Sass](https://sass-lang.com/documentation/variables#default-values) stylesheet language to extend traditional CSS with modern features

## Your Turn: [Exercise 2](ex-2.html){target="_blank"}

Building upon the app from exercise 1, use `{bslib}` to customize font and other theme elements!

```{r}
#| label: ex-2-timer
library(countdown)
countdown(minutes = 5, seconds = 0)
```

# Boosting User Experience (UX)

## Accessibility

Prioritizing accessibility leads to better UX!

::: {.nonincremental}
* Keyboard navigation (without mouse)
* Visualization color palettes accounting for vision deficiencies
* Metadata for HTML tag attributes 
:::

## Guides with [`{cicerone}`](https://cicerone.john-coene.com/index.html)

> A convienent API to create guided tours of Shiny applications using `driver.js`

![](https://cicerone.john-coene.com/img/home-cicerone.gif)


## The `{cicerone}` Workflow

::: {.nonincremental}
1. Note the input IDs of elements for guide
2. Use the `Cicerone` R6 class and `step()` methods to define steps
3. Import dependencies by declaring `use_cicerone()` in app UI
4. Define triggers to start guide in app server
:::

## `{shinyWidgets}`

> Custom widgets and other components to enhance your Shiny application

::: {.nonincremental}
* Alternatives to many classic Shiny inputs wrapping specialized frameworks within Bootstrap, Material Design, and more
* Fantastic demonstration app: [shinyapps.dreamrs.fr/shinyWidgets](http://shinyapps.dreamrs.fr/shinyWidgets/)
:::

![](https://dreamrs.github.io/shinyWidgets/reference/figures/checkboxGroupButtons.png)

## The Shiny UI Ecosystem

![[bs4dash.rinterface.com](https://bs4dash.rinterface.com/)](https://analytichealth.co.uk/wp-content/uploads/2021/10/PA-bs4Dash.gif)

## Choose your Widget

:::: {.columns}

::: {.column width="45%"}

[`{shinydashboard}`](https://rstudio.github.io/shinydashboard/index.html)

![](assets/img/valuebox.png){width="120%"}

:::

::: {.column width="55%"}

😀 Easy, right?

<br>

```r
library(shiny)
library(shinydashboard)
ui <- fluidPage(
  h2("My Title")
  valueBox(4024, "Total downloads")
)
```

:::

::::

. . . 

😐 Not quite: `{shiny}` and `{shinydashboard}` use different styling toolkits under the hood

## 💪 `{htmltools}` to the Rescue

::: {.panel-tabset}

### Define Widget

```r
useValueBox <- function() {
  if (!requireNamespace(package = "shinydashboard")) {
    message("package 'shinydashboard' is required to run this function")
  }
  
  deps <- htmltools::findDependencies(
      shinydashboard::dashboardPage(
        header = shinydashboard::dashboardHeader(),
        sidebar = shinydashboard::dashboardSidebar(),
        body = shinydashboard::dashboardBody()
      )
  )
  htmltools::attachDependencies(tags$div(), value = deps)
}

value_box <- function(...) shinydashboard::valueBox(...)
```

### App Usage

```r
library(shiny)
library(shinydashboard)

ui <- fluidPage(
  useValueBox()
  h2("My Title")
  value_box(4024, "Total downloads")
)
```

:::

## Back to `{shinyWidgets}`

Usage of this powerful technique in `{shinyWidgets}`:

::: {.nonincremental}
* [`useArgonDash()`](https://dreamrs.github.io/shinyWidgets/reference/useArgonDash.html)
* [`usebs4Dash()`](https://dreamrs.github.io/shinyWidgets/reference/useBs4Dash.html)
* [`useShinyDashboard()`](https://dreamrs.github.io/shinyWidgets/reference/useShinydashboard.html)
* [`useShinyDashboardPlus()`](https://dreamrs.github.io/shinyWidgets/reference/useShinydashboardPlus.html)
* [`useTablerDash()`](https://dreamrs.github.io/shinyWidgets/reference/useTablerDash.html)
:::

# Extend with JavaScript

## Not Just Styling

All of Shiny's interactivity is powered by JavaScript

::: {.nonincremental}
* Direct pipe to & from R process to client (browser)
* Normal use: Everything set up for you
:::

### Foundations in place to extend Shiny's power when desired

---

:::: {.columns}

::: {.column width="50%"}

### Shiny to JS

```r
session$sendCustomMessage(
  type = "say-hi", 
  message = "Shiny is Fun!"
)
```

:::

::: {.column width="50%"}

### JS to Shiny

```javasript
Shiny.addCustomMessageHandler(
  'say-hi', 
  function(msg) {
    alert('Hello user! ' + msg)
  }
);
```

:::

::::

Varations underpin many community packages

## [`{shinyjs}`](https://deanattali.com/shinyjs/)

> Easily improve the user experience of your Shiny apps in seconds, without having to know JS

::: {.nonincremental}
* Enable & disable buttons
* Show & hide elements
* Dynamically adding and removing CSS classes
* Click a shiny button from server side
* Run JS scripts easily if desired
:::

## Your Turn: [Exercise 3](ex-3.html){target="_blank"}

Harness the power of custom JavaScript in the Art Viewer App!

```{r}
#| label: ex-3-timer
library(countdown)
countdown(minutes = 10, seconds = 0)
```


